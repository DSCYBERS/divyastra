name: Python CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  security-events: write # Needed for code scanning

jobs:
  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: high

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          **/requirements*.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        black --check --diff .

    - name: Type check with mypy
      run: |
        mypy .

    - name: Test with pytest
      run: |
        pytest --cov=. --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  security:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
        cache: 'pip'
        cache-dependency-path: |
          **/requirements*.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run safety check
      run: |
        # Allow the job to continue even if vulnerabilities are found
        safety check --output json --output-file safety-results.json || echo "Vulnerabilities found, but continuing workflow"
        
    - name: Run bandit security linter
      run: |
        bandit -r . -f sarif -o bandit-results.sarif
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: |
          bandit-results.sarif
          safety-results.json

    - name: Upload bandit results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: bandit-results.sarif
        category: bandit

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for dependency submission
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          
      - name: Submit dependencies to GitHub
        uses: actions/dependency-submission-action@v1
        with:
          # Supports pip, pipenv, poetry
          dependency-manager: pip
